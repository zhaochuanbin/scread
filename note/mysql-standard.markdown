---
layout : post
title : "mysql规范"
category : mysql
tagline: ""
date : 2016-03-15
tags : [mysql,数据库,规范]
---
### 建表规约
###### 表名、字段名必须使用小写字母或数字
禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。

###### 表名不使用复数名词
表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于DO类名也是单数形式，符合表达习惯。

###### 禁用保留字
如desc、range、match、delayed等，请参考MySQL官方保留字

###### 强制索引
唯一索引名为uk_字段名；普通索引名则为idx_字段名。uk_ 即 unique key；idx_ 即index的简称。

###### 小数类型为decimal，禁止使用float和double
float和double在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过decimal的范围，建议将数据拆成整数和小数分开存储。

###### char定长字符串
如果存储的字符串长度几乎相等，使用char定长字符串类型

###### varchar是可变长字符串
varchar是可变长字符串，不预先分配存储空间，长度不要超过5000，如果存储长度大于此值，定义字段类型为text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。

###### 表必备三字段：id, gmt_create, gmt_modified

###### 表的命名
表的命名最好是加上“业务名称_表的作用”。
如tiger_task / tiger_reader / mpp_config

###### 库名与应用名称尽量一致

###### 如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释

###### 字段允许适当冗余，以提高性能，但是必须考虑数据同步的情
冗余字段应遵循： 
- 不是频繁修改的字段。 
- 不是varchar超长字段，更不能是text字段。

###### 分库分表的标准
单表行数超过500万行或者单表容量超过2GB，才推荐进行分库分表。
如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。

###### 合适的字符存储长
合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。
人的年龄用unsigned tinyint（表示范围0-255，人的寿命不会超过255岁）；海龟就必须是smallint，但如果是太阳的年龄，就必须是int；如果是所有恒星的年龄都加起来，那么就必须使用bigint。

### 索引规约

###### 业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引
不要以为唯一索引影响了insert速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验和控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。

###### 超过三个表禁止join
超过三个表禁止join。需要join的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。
即使双表join也要注意表索引、SQL性能。

###### varchar字段上建立索引时，必须指定索引长度
在varchar字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。
索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为20的索引，区分度会高达90%以上，可以使用count(distinct left(列名, 索引长度))/count(*)的区分度来确定。

###### 页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决
索引文件具有B-Tree的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。

###### order by注意利用索引的有序性
order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。 正例：where a=? and b=? order by c; 索引：a_b_c 反例：索引中有范围查找，那么索引有序性无法利用，如：WHERE a>10 ORDER BY b; 索引a_b无法排序。

###### 利用覆盖索引来进行查询操作，来避免回表操作
能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种效果，用explain的结果，extra列会出现：using index。

###### 利用延迟关联或者子查询优化超多分页场景
MySQL并不是跳过offset行，而是取offset+N行，然后返回放弃前offset行，返回N行，那当offset特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行SQL改写。 正例：先快速定位需要获取的id段，然后再关联： SELECT a.* FROM 表1 a, (select id from 表1 where 条件 LIMIT 100000,20 ) b where a.id=b.id

###### SQL性能优化的目标：至少要达到 range 级别，要求是ref级别，如果可以是consts最好
- consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。 
- ref 指的是使用普通的索引（normal index）。 
- range 对索引进行范围检索。
- explain表的结果，type=index，索引物理文件全扫描，速度非常慢，这个index级别比较range还低，与全表扫描是小巫见大巫。

###### 建组合索引的时候，区分度最高的在最左边
如果where a=? and b=? ，a列的几乎接近于唯一值，那么只需要单建idx_a索引即可。
存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where a>? and b=? 那么即使a的区分度更高，也必须把b放在索引的最前列。

###### 创建索引时避免有如下极端误解
- 误认为一个查询就需要建一个索引
- 误认为索引会消耗空间、严重拖慢更新和新增速度
- 误认为唯一索引一律需要在应用层通过“先查后插”方式解决

### SQL规约

###### 在代码中写分页查询逻辑时，若count为0应直接返回，避免执行后面的分页语句

###### 不要使用count(列名)或count(常量)来替代count(*)
count(*)就是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。
count(*)会统计值为NULL的行，而count(列名)不会统计此列为NULL值的行。

###### count(distinct col) 计算该列除NULL之外的不重复数量。
注意 count(distinct col1, col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0。

###### 当某一列的值全是NULL时，count(col)的返回结果为0
但sum(col)的返回结果为NULL，因此使用sum()时需注意NPE问题。 
正例：可以使用如下方式来避免sum的NPE问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g)) FROM table;

###### NULL值
- 使用ISNULL()来判断是否为NULL值。
- NULL与任何值的直接比较都为NULL
###### 不得使用外键与级联，一切外键概念必须在应用层解决
###### 禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。
###### 数据订正时，删除和修改记录
要先select，避免出现误删除，确认无误才能执行更新语句。
###### in操作
in操作能避免则避免，若实在避免不了，需要仔细评估in后边的集合元素数量，控制在1000个之内
### utf-8编码
SELECT LENGTH("轻松工作")； 返回为12 
SELECT CHARACTER_LENGTH("轻松工作")； 返回为4 
如果要使用表情，那么使用utfmb4来进行存储，注意它与utf-8编码的区别。

###### TRUNCATE TABLE 与 DELETE
TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。
但TRUNCATE无事务且不触发trigger，有可能造成事故，故不建议在开发代码中使用此语句。
**TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。**

### ORM规约
###### 在表查询中，一律不要使用 * 作为查询的字段列表
把需要哪些字段必须明确写明。
- 增加查询分析器解析成本
- 增减字段容易与resultMap配置不一致

###### POJO和数据库的boolean属性
POJO类的boolean属性不能加is，而数据库字段必须加is_，要求在resultMap中进行字段与属性之间的映射

###### 不要用resultClass当返回参数
即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个与之对应。
配置映射关系，使字段与DO类解耦，方便维护。

###### SQL注入
xml配置中参数注意使用：#{}，#param# 不要使用${} 此种方式容易出现SQL注入。

###### iBATIS自带的queryForList(String statementName,int start,int size)不推荐使用
其实现方式是在数据库取到statementName对应的SQL语句的所有记录，再通过subList取start,size的子集合，线上因为这个原因曾经出现过OOM。
正例：在sqlmap.xml中引入 #start#, #size#

    Map<String, Object> map = new HashMap<String, Object>();
    map.put("start", start);
    map.put("size", size);

###### 不允许直接拿HashMap与Hashtable作为查询结果集的输出
###### 更新数据表记录时，必须同时更新记录对应的gmt_modified字段值为当前时间。

###### 不要写一个大而全的数据更新接口
不要写一个大而全的数据更新接口，传入为POJO类，不管是不是自己的目标更新字段，都进行update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行SQL时，尽量不要更新无改动的字段，一是易出错；二是效率低；三是binlog增加存储

###### @Transactional事务不要滥用
事务会影响数据库的QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等

###### isEqual、isNotEmpty、isNotNull
<isEqual>中的compareValue是与属性值对比的常量，一般是数字，表示相等时带上此条件；
<isNotEmpty>表示不为空且不为null时执行；
<isNotNull>表示不为null值时执行。